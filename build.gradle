apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'jetty'

//
// Dependency on gradle-git to download juds to download juds
// @see https://github.com/ajoberstar/gradle-git
//

buildscript {
  repositories { mavenCentral() }
  dependencies { classpath 'org.ajoberstar:gradle-git:0.2.3' }
}

import org.ajoberstar.gradle.git.tasks.*;

task clonejuds(type: GitClone) {
  def destination = file('juds')
  uri = 'https://github.com/mcfunley/juds.git'
  destinationPath = destination
  bare = false
  enabled = !destination.exists() //to clone only once
}

task confjuds(type: Exec, dependsOn: 'clonejuds') {
  workingDir './juds'
  if (!new File('./juds/juds-0.94.jar').exists()) {
    commandLine './configure','CFLAGS=-I' + System.getProperty('java.home') + '/include'
  } else {
    commandLine 'ls', 'juds-0.94.jar'
  }
}

task buildjuds(type: Exec, dependsOn: 'confjuds') {
  workingDir './juds'
  if (!new File('./juds/juds-0.94.jar').exists()) {
    commandLine 'make'
  } else {
    commandLine 'ls', 'juds-0.94.jar'
  }
}

//
// Repositories for dependency resolution
//

repositories {
  mavenCentral()
}

//
// Project dependencies
//

dependencies {
  compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.47'
  compile group: 'org.bouncycastle', name: 'bcpg-jdk15on', version: '1.47'
  compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
  compile group: 'com.google.inject', name: 'guice', version: '3.0'
  compile group: 'com.google.inject.extensions', name: 'guice-servlet', version: '3.0'
  compile group: 'com.google.code.gson', name: 'gson', version: '2.2.2'
  compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.2.2'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.2.2'
  
  compile files('juds/juds-0.94.jar')
  
  testCompile group: 'junit', name: 'junit', version: '4.+'
}

war {
  ext.clspth = []

  for (f in classpath) {
    if (!f.toString().endsWith('juds-0.94.jar')) {
      ext.clspth.add(f)
    }
  }
  classpath = ext.clspth
}

test {
  scanForTestClasses = true

  //makes the standard streams (err and out) visible at console when running tests
  testLogging.showStandardStreams = true

  //listening to test execution events
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}

build.dependsOn {
  'buildjuds'
}

//
// Handly tasks to interact with an OSS
//

task(OSSGenMasterSecret, dependsOn: 'build', type: JavaExec) {
  doFirst {
    ext.props = ['oss.url', 'oss.pubring', 'oss.keyid', 'oss.k']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.pubring=PUBRING0,PUBRING1,... -Doss.keyid=KEYID0,KEYID1,... -Doss.k=K OSSGenMasterSecret')
      }
    }
  }
  main = 'com.geoxp.oss.client.OSSGenMasterSecret'
  classpath = sourceSets.main.runtimeClasspath
  args System.getProperty('oss.url'), System.getProperty('oss.pubring'), System.getProperty('oss.keyid'), System.getProperty('oss.k')
}

task(OSSInit, dependsOn: 'build') {
  doFirst { 
    ext.props = ['oss.url', 'oss.sshkey']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.sshkey=SSH_KEY_FINGERPRINT OSSInit\nPassing the raw init secret via stdin.')
      }
    }
    ext.cp = ''
    for(f in sourceSets.main.runtimeClasspath) {
      ext.cp = ext.cp + ':' + f
    }
    println 'To initialize OSS run the following command:'
    println ''
    println 'gpg -d XXXXXXXX.oss | java -classpath ' + ext.cp + ' com.geoxp.oss.OSSInit ' + System.getProperty('oss.url') + ' ' + System.getProperty('oss.sshkey')
  }
}

task(OSSGenSecret, dependsOn: 'build', type: JavaExec) {
  doFirst { 
    ext.props = ['oss.url', 'oss.secret', 'oss.sshkey']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.secret=SECRET_NAME -Doss.sshkey=SSH_KEY_FINGERPRINT OSSGenSecret')
      }
    }
  }
  main = 'com.geoxp.oss.client.OSSGenSecret'
  classpath = sourceSets.main.runtimeClasspath
  args System.getProperty('oss.url'), System.getProperty('oss.secret'), System.getProperty('oss.sshkey')
}

task(OSSGetSecret, dependsOn: 'build', type: JavaExec) {
  doFirst { 
    ext.props = ['oss.url', 'oss.secret']
    for (prop in ext.props) {
      if (null == System.getProperty(prop)) {
        throw new RuntimeException('Usage: gradle -Doss.url=OSS_URL -Doss.secret=SECRET_NAME [-Doss.sshkey=SSH_KEY_FINGERPRINT] OSSGetSecret')
      }
    }
  }
  main = 'com.geoxp.oss.client.OSSGetSecret'
  classpath = sourceSets.main.runtimeClasspath
  args System.getProperty('oss.url'), System.getProperty('oss.secret'), null != System.getProperty('oss.sshkey') ? System.getProperty('oss.sshkey') : ''
}
